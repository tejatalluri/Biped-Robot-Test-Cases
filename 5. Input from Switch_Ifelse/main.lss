
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000050  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000330  00000000  00000000  000000a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000672  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	0b c0       	rjmp	.+22     	; 0x4c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:

#include<avr/io.h>				//This is the header for AVR Microcontroller.

int main(void)
{
	DDRC=0x00;					// PORTC data direction configuration as input port.
  38:	14 ba       	out	0x14, r1	; 20
	PORTC=0x01;					// PORTC lowest bit initialization as high (Pull-up mode)
  3a:	81 e0       	ldi	r24, 0x01	; 1
  3c:	85 bb       	out	0x15, r24	; 21
		
	DDRB=0x0F;					// PORTB lower nibble data direction configuration as output port.
  3e:	8f e0       	ldi	r24, 0x0F	; 15
  40:	87 bb       	out	0x17, r24	; 23
	PORTB=0x00;					// Initial value to PORTB is 00
  42:	18 ba       	out	0x18, r1	; 24
	
	
	while(1)
	{		
		if((PINC & 0x01)==0x00)	//checking for switch press at s0. 
  44:	98 99       	sbic	0x13, 0	; 19
  46:	fd cf       	rjmp	.-6      	; 0x42 <__SREG__+0x3>
			{
				PORTB=0x0F;			//glow All four LED
  48:	88 bb       	out	0x18, r24	; 24
  4a:	fc cf       	rjmp	.-8      	; 0x44 <__SREG__+0x5>

0000004c <_exit>:
  4c:	f8 94       	cli

0000004e <__stop_program>:
  4e:	ff cf       	rjmp	.-2      	; 0x4e <__stop_program>
