
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003c0  00000000  00000000  000000e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000067c  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	28 c0       	rjmp	.+80     	; 0x86 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:

#include<avr/io.h>				//This is the header for AVR Microcontroller.

int main(void)
{
	DDRC=0x00;					// PORTC data direction configuration as input port.
  38:	14 ba       	out	0x14, r1	; 20
	PORTC=0x01;					// PORTC lowest bit initialization as high (Pull-up mode)
  3a:	81 e0       	ldi	r24, 0x01	; 1
  3c:	85 bb       	out	0x15, r24	; 21
		
	DDRB=0x0F;					// PORTB lower nibble data direction configuration as output port.
  3e:	8f e0       	ldi	r24, 0x0F	; 15
  40:	87 bb       	out	0x17, r24	; 23
	PORTB=0x00;					// Initial value to PORTB is 00
  42:	18 ba       	out	0x18, r1	; 24
  44:	80 e0       	ldi	r24, 0x00	; 0
				break;
				case 2:
					PORTB=0x02;				//glow LED1
				break;
				case 3:
					PORTB=0x04;				//glow LED2
  46:	24 e0       	ldi	r18, 0x04	; 4
				break;
				case 4:
					PORTB=0x08;				//glow LED3
  48:	98 e0       	ldi	r25, 0x08	; 8
	unsigned char i=0;
	
	while(1)
	{
		
		if((PINC & 0x01)==0x00)			//checking for switch press at s0. 
  4a:	98 99       	sbic	0x13, 0	; 19
  4c:	06 c0       	rjmp	.+12     	; 0x5a <__SREG__+0x1b>
			{
				i++;	
  4e:	8f 5f       	subi	r24, 0xFF	; 255
				if(i>4)
  50:	85 30       	cpi	r24, 0x05	; 5
  52:	08 f0       	brcs	.+2      	; 0x56 <__SREG__+0x17>
  54:	80 e0       	ldi	r24, 0x00	; 0
				{	
					i=0;
				}
				while((PINC & 0x01)==0x00);	
  56:	98 9b       	sbis	0x13, 0	; 19
  58:	fe cf       	rjmp	.-4      	; 0x56 <__SREG__+0x17>
			}
		switch(i)
  5a:	82 30       	cpi	r24, 0x02	; 2
  5c:	71 f0       	breq	.+28     	; 0x7a <__SREG__+0x3b>
  5e:	83 30       	cpi	r24, 0x03	; 3
  60:	28 f4       	brcc	.+10     	; 0x6c <__SREG__+0x2d>
  62:	88 23       	and	r24, r24
  64:	41 f0       	breq	.+16     	; 0x76 <__SREG__+0x37>
  66:	81 30       	cpi	r24, 0x01	; 1
  68:	81 f7       	brne	.-32     	; 0x4a <__SREG__+0xb>
  6a:	07 c0       	rjmp	.+14     	; 0x7a <__SREG__+0x3b>
  6c:	83 30       	cpi	r24, 0x03	; 3
  6e:	39 f0       	breq	.+14     	; 0x7e <__SREG__+0x3f>
  70:	84 30       	cpi	r24, 0x04	; 4
  72:	59 f7       	brne	.-42     	; 0x4a <__SREG__+0xb>
  74:	06 c0       	rjmp	.+12     	; 0x82 <__SREG__+0x43>
			{
				case 0:
					PORTB=0x00;				//Turning Off All four LED
  76:	18 ba       	out	0x18, r1	; 24
  78:	e8 cf       	rjmp	.-48     	; 0x4a <__SREG__+0xb>
				break;
				case 1:
					PORTB=0x01;				//glow LED0
				break;
				case 2:
					PORTB=0x02;				//glow LED1
  7a:	88 bb       	out	0x18, r24	; 24
  7c:	e6 cf       	rjmp	.-52     	; 0x4a <__SREG__+0xb>
				break;
				case 3:
					PORTB=0x04;				//glow LED2
  7e:	28 bb       	out	0x18, r18	; 24
  80:	e4 cf       	rjmp	.-56     	; 0x4a <__SREG__+0xb>
				break;
				case 4:
					PORTB=0x08;				//glow LED3
  82:	98 bb       	out	0x18, r25	; 24
  84:	e2 cf       	rjmp	.-60     	; 0x4a <__SREG__+0xb>

00000086 <_exit>:
  86:	f8 94       	cli

00000088 <__stop_program>:
  88:	ff cf       	rjmp	.-2      	; 0x88 <__stop_program>
