
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080009c  0080009c  0000046a  2**0
                  ALLOC
  3 .stab         00000e10  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008d8  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e9       	ldi	r30, 0x9A	; 154
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ac 39       	cpi	r26, 0x9C	; 156
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ac e9       	ldi	r26, 0x9C	; 156
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 3a       	cpi	r26, 0xA4	; 164
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	e0 d0       	rcall	.+448    	; 0x21a <main>
  5a:	9d c1       	rjmp	.+826    	; 0x396 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <delay_ns_lcd>:
delay_ns_lcd(200);  
PORTB&=~0x20;
}

void delay_ns_lcd(unsigned char tim)
{
  5e:	20 91 9c 00 	lds	r18, 0x009C
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	02 c0       	rjmp	.+4      	; 0x6a <delay_ns_lcd+0xc>
	for(j=0;j<tim;j++)
  66:	9f 5f       	subi	r25, 0xFF	; 255
  68:	2b e0       	ldi	r18, 0x0B	; 11
  6a:	98 17       	cp	r25, r24
  6c:	e0 f3       	brcs	.-8      	; 0x66 <delay_ns_lcd+0x8>
  6e:	20 93 9c 00 	sts	0x009C, r18
  72:	90 93 9d 00 	sts	0x009D, r25
	{
		for(k=0;k<11;k++)
		{};
	}
}
  76:	08 95       	ret

00000078 <latch>:

}

void latch(void)
{
PORTB&=~0x20;
  78:	c5 98       	cbi	0x18, 5	; 24
delay_ns_lcd(200);  
  7a:	88 ec       	ldi	r24, 0xC8	; 200
  7c:	f0 df       	rcall	.-32     	; 0x5e <delay_ns_lcd>
PORTB|=0x20;
  7e:	c5 9a       	sbi	0x18, 5	; 24
delay_ns_lcd(200);  
  80:	88 ec       	ldi	r24, 0xC8	; 200
  82:	ed df       	rcall	.-38     	; 0x5e <delay_ns_lcd>
PORTB&=~0x20;
  84:	c5 98       	cbi	0x18, 5	; 24
}
  86:	08 95       	ret

00000088 <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{   unsigned char cmd_temp=cmd;
  88:	1f 93       	push	r17
  8a:	18 2f       	mov	r17, r24
	PORTB&=~0x30;
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	8f 7c       	andi	r24, 0xCF	; 207
  90:	88 bb       	out	0x18, r24	; 24
	cmd_temp>>=4;
	PORTB=((cmd_temp & 0x0F));			
  92:	81 2f       	mov	r24, r17
  94:	82 95       	swap	r24
  96:	8f 70       	andi	r24, 0x0F	; 15
  98:	88 bb       	out	0x18, r24	; 24
	latch();
  9a:	ee df       	rcall	.-36     	; 0x78 <latch>
	PORTB=(cmd & 0x0F);	
  9c:	1f 70       	andi	r17, 0x0F	; 15
  9e:	18 bb       	out	0x18, r17	; 24
	latch();
  a0:	eb df       	rcall	.-42     	; 0x78 <latch>
}
  a2:	1f 91       	pop	r17
  a4:	08 95       	ret

000000a6 <lcd_char>:


void lcd_char(unsigned char single)
{
  a6:	1f 93       	push	r17
  a8:	18 2f       	mov	r17, r24
    unsigned char temp_single=single;
	temp_single>>=4;
	PORTB=0x10;
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	88 bb       	out	0x18, r24	; 24
	PORTB=0x00;
  ae:	18 ba       	out	0x18, r1	; 24
	PORTB=(temp_single & 0x0F)|0x10;						
  b0:	81 2f       	mov	r24, r17
  b2:	82 95       	swap	r24
  b4:	8f 70       	andi	r24, 0x0F	; 15
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	88 bb       	out	0x18, r24	; 24
	latch();
  ba:	de df       	rcall	.-68     	; 0x78 <latch>
	PORTB=(single & 0x0F)|0x10;
  bc:	1f 70       	andi	r17, 0x0F	; 15
  be:	10 61       	ori	r17, 0x10	; 16
  c0:	18 bb       	out	0x18, r17	; 24
	latch();
  c2:	da df       	rcall	.-76     	; 0x78 <latch>
}
  c4:	1f 91       	pop	r17
  c6:	08 95       	ret

000000c8 <lcd_string>:

void lcd_string(unsigned char *str)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <lcd_string+0xc>
	unsigned char k=0;

		while(*str!='\0')	//Till null character is encountered
		{
			lcd_char(*str);
  d0:	ea df       	rcall	.-44     	; 0xa6 <lcd_char>
			str++;
  d2:	21 96       	adiw	r28, 0x01	; 1

void lcd_string(unsigned char *str)
{
	unsigned char k=0;

		while(*str!='\0')	//Till null character is encountered
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	d9 f7       	brne	.-10     	; 0xd0 <lcd_string+0x8>
		{
			lcd_char(*str);
			str++;
		}
}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <lcd_showvalue>:



void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
  ea:	64 e6       	ldi	r22, 0x64	; 100
  ec:	21 d1       	rcall	.+578    	; 0x330 <__udivmodqi4>
  ee:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	8c e9       	ldi	r24, 0x9C	; 156
  f6:	9f ef       	ldi	r25, 0xFF	; 255
  f8:	28 9f       	mul	r18, r24
  fa:	70 01       	movw	r14, r0
  fc:	29 9f       	mul	r18, r25
  fe:	f0 0c       	add	r15, r0
 100:	38 9f       	mul	r19, r24
 102:	f0 0c       	add	r15, r0
 104:	11 24       	eor	r1, r1
 106:	c7 01       	movw	r24, r14
 108:	81 0f       	add	r24, r17
 10a:	91 1d       	adc	r25, r1
 10c:	6a e0       	ldi	r22, 0x0A	; 10
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	1b d1       	rcall	.+566    	; 0x348 <__divmodhi4>
 112:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 114:	84 2f       	mov	r24, r20
 116:	80 5d       	subi	r24, 0xD0	; 208
 118:	c6 df       	rcall	.-116    	; 0xa6 <lcd_char>
	lcd_char(T+48);
 11a:	80 2f       	mov	r24, r16
 11c:	80 5d       	subi	r24, 0xD0	; 208
 11e:	c3 df       	rcall	.-122    	; 0xa6 <lcd_char>
	lcd_char(O+48);
 120:	10 5d       	subi	r17, 0xD0	; 208
 122:	1e 0d       	add	r17, r14
 124:	86 ef       	ldi	r24, 0xF6	; 246
 126:	9f ef       	ldi	r25, 0xFF	; 255
 128:	08 9f       	mul	r16, r24
 12a:	00 2d       	mov	r16, r0
 12c:	11 24       	eor	r1, r1
 12e:	80 2f       	mov	r24, r16
 130:	81 0f       	add	r24, r17
 132:	b9 df       	rcall	.-142    	; 0xa6 <lcd_char>
}
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	ff 90       	pop	r15
 13a:	ef 90       	pop	r14
 13c:	08 95       	ret

0000013e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row,unsigned char column)			//move cursor to the specified position
{
   if(row==0)
 13e:	88 23       	and	r24, r24
 140:	21 f4       	brne	.+8      	; 0x14a <lcd_gotoxy+0xc>
    {
	 lcd_cmd(0x80+column);
 142:	86 2f       	mov	r24, r22
 144:	80 58       	subi	r24, 0x80	; 128
 146:	a0 df       	rcall	.-192    	; 0x88 <lcd_cmd>
 148:	08 95       	ret
	}
   else if(row==1)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	19 f4       	brne	.+6      	; 0x154 <lcd_gotoxy+0x16>
	{
	 lcd_cmd(0xC0+column);	
 14e:	86 2f       	mov	r24, r22
 150:	80 54       	subi	r24, 0x40	; 64
 152:	9a df       	rcall	.-204    	; 0x88 <lcd_cmd>
 154:	08 95       	ret

00000156 <delay_ms_lcd>:
	}	
}


void delay_ms_lcd(unsigned int ms)
{
 156:	0a c0       	rjmp	.+20     	; 0x16c <delay_ms_lcd+0x16>
	int i;

	while (ms-- > 0)
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		for (i = 0; i < 3276; ++i)
			asm("nop");
 15c:	00 00       	nop
	int i;

	while (ms-- > 0)
	{
		
		for (i = 0; i < 3276; ++i)
 15e:	2f 5f       	subi	r18, 0xFF	; 255
 160:	3f 4f       	sbci	r19, 0xFF	; 255
 162:	4c e0       	ldi	r20, 0x0C	; 12
 164:	2c 3c       	cpi	r18, 0xCC	; 204
 166:	34 07       	cpc	r19, r20
 168:	c9 f7       	brne	.-14     	; 0x15c <delay_ms_lcd+0x6>
 16a:	01 97       	sbiw	r24, 0x01	; 1

void delay_ms_lcd(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	a1 f7       	brne	.-24     	; 0x158 <delay_ms_lcd+0x2>
	{
		
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 170:	08 95       	ret

00000172 <lcd_init>:
void lcd_gotoxy(unsigned char row,unsigned char column);
void delay_ms_lcd(unsigned int ms);
void lcd_clear();

void lcd_init(void)	//init the lcd
{	
 172:	1f 93       	push	r17
  
	DDRB=0x3F;
 174:	8f e3       	ldi	r24, 0x3F	; 63
 176:	87 bb       	out	0x17, r24	; 23
	delay_ms_lcd(20);
 178:	84 e1       	ldi	r24, 0x14	; 20
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	ec df       	rcall	.-40     	; 0x156 <delay_ms_lcd>

	
	PORTB=0x03;		
 17e:	13 e0       	ldi	r17, 0x03	; 3
 180:	18 bb       	out	0x18, r17	; 24
	latch();
 182:	7a df       	rcall	.-268    	; 0x78 <latch>
	delay_ms_lcd(5);
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	e6 df       	rcall	.-52     	; 0x156 <delay_ms_lcd>
	PORTB=0x03;
 18a:	18 bb       	out	0x18, r17	; 24
	latch();
 18c:	75 df       	rcall	.-278    	; 0x78 <latch>
	delay_ms_lcd(1);
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	e1 df       	rcall	.-62     	; 0x156 <delay_ms_lcd>
	PORTB=0x03;
 194:	18 bb       	out	0x18, r17	; 24
	latch();
 196:	70 df       	rcall	.-288    	; 0x78 <latch>
	delay_ms_lcd(1);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	dc df       	rcall	.-72     	; 0x156 <delay_ms_lcd>
	PORTB=0x02;			//Enable 4 bit mode
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	88 bb       	out	0x18, r24	; 24
	latch();
 1a2:	6a df       	rcall	.-300    	; 0x78 <latch>
	delay_ms_lcd(5);		
 1a4:	85 e0       	ldi	r24, 0x05	; 5
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	d6 df       	rcall	.-84     	; 0x156 <delay_ms_lcd>
	
  	   
	lcd_cmd(0x28);		//Set interface 4 bit 2 line
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	6d df       	rcall	.-294    	; 0x88 <lcd_cmd>
	delay_ms_lcd(1);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	d1 df       	rcall	.-94     	; 0x156 <delay_ms_lcd>
	
	lcd_cmd(0x08);		//Enable display/cursor
 1b4:	88 e0       	ldi	r24, 0x08	; 8
 1b6:	68 df       	rcall	.-304    	; 0x88 <lcd_cmd>
	delay_ms_lcd(1);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	cc df       	rcall	.-104    	; 0x156 <delay_ms_lcd>
	
	lcd_cmd(0x01);		//clear the display
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	63 df       	rcall	.-314    	; 0x88 <lcd_cmd>
	delay_ms_lcd(1);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	c7 df       	rcall	.-114    	; 0x156 <delay_ms_lcd>
	
	lcd_cmd(0x06);		//Set cursor move, Move cursor right
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	5e df       	rcall	.-324    	; 0x88 <lcd_cmd>
	delay_ms_lcd(1);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	c2 df       	rcall	.-124    	; 0x156 <delay_ms_lcd>
	   
		
	lcd_cmd(0X0C);		//Turn on display
 1d2:	8c e0       	ldi	r24, 0x0C	; 12
 1d4:	59 df       	rcall	.-334    	; 0x88 <lcd_cmd>
	delay_ms_lcd(2);
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	bd df       	rcall	.-134    	; 0x156 <delay_ms_lcd>

}
 1dc:	1f 91       	pop	r17
 1de:	08 95       	ret

000001e0 <lcd_clear>:
	}
}

void lcd_clear()
{
 lcd_cmd(0x01);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	52 df       	rcall	.-348    	; 0x88 <lcd_cmd>
}
 1e4:	08 95       	ret

000001e6 <adc_init>:

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
 1e6:	86 e8       	ldi	r24, 0x86	; 134
 1e8:	86 b9       	out	0x06, r24	; 6
  		
 }
 1ea:	08 95       	ret

000001ec <getdata>:
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
 1ec:	90 e6       	ldi	r25, 0x60	; 96
 1ee:	97 b9       	out	0x07, r25	; 7
    ADMUX|=chno;					//select the ADC channel
 1f0:	97 b1       	in	r25, 0x07	; 7
 1f2:	98 2b       	or	r25, r24
 1f4:	97 b9       	out	0x07, r25	; 7
    ADCSRA|=0X40;					//start ADC convertion
 1f6:	36 9a       	sbi	0x06, 6	; 6
     while((ADCSRA&0x40)==0x40);	
 1f8:	36 99       	sbic	0x06, 6	; 6
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <getdata+0xc>
	return ADCH;
 1fc:	85 b1       	in	r24, 0x05	; 5
  }
 1fe:	08 95       	ret

00000200 <checkswitch>:
#define led PORTB
#define s0 (PINC&0x01)
unsigned char flag;
void checkswitch()
 {   
     ADCSRA=0X00;
 200:	16 b8       	out	0x06, r1	; 6
     if(s0==0){while(s0==0);flag+=1;}
 202:	98 99       	sbic	0x13, 0	; 19
 204:	07 c0       	rjmp	.+14     	; 0x214 <checkswitch+0x14>
 206:	98 9b       	sbis	0x13, 0	; 19
 208:	fe cf       	rjmp	.-4      	; 0x206 <checkswitch+0x6>
 20a:	80 91 a1 00 	lds	r24, 0x00A1
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	80 93 a1 00 	sts	0x00A1, r24
	 ADCSRA=0X87;
 214:	87 e8       	ldi	r24, 0x87	; 135
 216:	86 b9       	out	0x06, r24	; 6
	
 }
 218:	08 95       	ret

0000021a <main>:
 


int main()
 {
 21a:	df 92       	push	r13
 21c:	ef 92       	push	r14
 21e:	ff 92       	push	r15
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
  DDRD=0xF0;
 228:	80 ef       	ldi	r24, 0xF0	; 240
 22a:	81 bb       	out	0x11, r24	; 17
  PORTC=0x01;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	85 bb       	out	0x15, r24	; 21
  lcd_init();
 230:	a0 df       	rcall	.-192    	; 0x172 <lcd_init>
  lcd_string("Technophilia");
 232:	80 e6       	ldi	r24, 0x60	; 96
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	48 df       	rcall	.-368    	; 0xc8 <lcd_string>
 238:	80 e1       	ldi	r24, 0x10	; 16
 23a:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 23c:	2c e2       	ldi	r18, 0x2C	; 44
 23e:	31 e0       	ldi	r19, 0x01	; 1
 240:	f9 01       	movw	r30, r18
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 246:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 248:	d9 f7       	brne	.-10     	; 0x240 <main+0x26>
  _delay_ms(1000);
  
  lcd_gotoxy(0,0);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	77 df       	rcall	.-274    	; 0x13e <lcd_gotoxy>
  lcd_string("blinking LEDs ");
 250:	8d e6       	ldi	r24, 0x6D	; 109
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	39 df       	rcall	.-398    	; 0xc8 <lcd_string>
  lcd_gotoxy(1,0);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	71 df       	rcall	.-286    	; 0x13e <lcd_gotoxy>
  lcd_string("press s0"); 
 25c:	8c e7       	ldi	r24, 0x7C	; 124
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	33 df       	rcall	.-410    	; 0xc8 <lcd_string>
  flag=0;
 262:	10 92 a1 00 	sts	0x00A1, r1

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
 266:	86 e8       	ldi	r24, 0x86	; 134
 268:	86 b9       	out	0x06, r24	; 6
   adc_init();
  while(1)
   {
	led=0x0F;
 26a:	1f e0       	ldi	r17, 0x0F	; 15
 26c:	cc e2       	ldi	r28, 0x2C	; 44
 26e:	d1 e0       	ldi	r29, 0x01	; 1
	  lcd_gotoxy(0,0);
	  lcd_string("mov motor      ");
	  lcd_gotoxy(1,0);
	  lcd_string("press s0");
	 
      PORTD=0x50;
 270:	20 e5       	ldi	r18, 0x50	; 80
 272:	d2 2e       	mov	r13, r18
	  PORTB=0X04;
 274:	94 e0       	ldi	r25, 0x04	; 4
 276:	e9 2e       	mov	r14, r25
	  _delay_ms(1000);
	  PORTD=0xA0;
 278:	80 ea       	ldi	r24, 0xA0	; 160
 27a:	f8 2e       	mov	r15, r24
	  PORTB=0X08;
 27c:	08 e0       	ldi	r16, 0x08	; 8
  lcd_string("press s0"); 
  flag=0;
   adc_init();
  while(1)
   {
	led=0x0F;
 27e:	18 bb       	out	0x18, r17	; 24
 280:	80 e1       	ldi	r24, 0x10	; 16
 282:	97 e2       	ldi	r25, 0x27	; 39
 284:	fe 01       	movw	r30, r28
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <main+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28c:	d9 f7       	brne	.-10     	; 0x284 <main+0x6a>
	_delay_ms(1000);
	led=0x00;
 28e:	18 ba       	out	0x18, r1	; 24
 290:	80 e1       	ldi	r24, 0x10	; 16
 292:	97 e2       	ldi	r25, 0x27	; 39
 294:	fe 01       	movw	r30, r28
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <main+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29c:	d9 f7       	brne	.-10     	; 0x294 <main+0x7a>
 29e:	1e c0       	rjmp	.+60     	; 0x2dc <main+0xc2>
	 
	checkswitch(); 
	 
	while(flag==1)
	 {
	  lcd_gotoxy(0,0);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	4c df       	rcall	.-360    	; 0x13e <lcd_gotoxy>
	  lcd_string("mov motor      ");
 2a6:	85 e8       	ldi	r24, 0x85	; 133
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e df       	rcall	.-484    	; 0xc8 <lcd_string>
	  lcd_gotoxy(1,0);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	46 df       	rcall	.-372    	; 0x13e <lcd_gotoxy>
	  lcd_string("press s0");
 2b2:	8c e7       	ldi	r24, 0x7C	; 124
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	08 df       	rcall	.-496    	; 0xc8 <lcd_string>
	 
      PORTD=0x50;
 2b8:	d2 ba       	out	0x12, r13	; 18
	  PORTB=0X04;
 2ba:	e8 ba       	out	0x18, r14	; 24
 2bc:	80 e1       	ldi	r24, 0x10	; 16
 2be:	97 e2       	ldi	r25, 0x27	; 39
 2c0:	fe 01       	movw	r30, r28
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0xa8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c8:	d9 f7       	brne	.-10     	; 0x2c0 <main+0xa6>
	  _delay_ms(1000);
	  PORTD=0xA0;
 2ca:	f2 ba       	out	0x12, r15	; 18
	  PORTB=0X08;
 2cc:	08 bb       	out	0x18, r16	; 24
 2ce:	80 e1       	ldi	r24, 0x10	; 16
 2d0:	97 e2       	ldi	r25, 0x27	; 39
 2d2:	fe 01       	movw	r30, r28
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <main+0xba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2da:	d9 f7       	brne	.-10     	; 0x2d2 <main+0xb8>
	  _delay_ms(1000);
	  
	  checkswitch();
 2dc:	91 df       	rcall	.-222    	; 0x200 <checkswitch>
	led=0x00;
	_delay_ms(1000);
	 
	checkswitch(); 
	 
	while(flag==1)
 2de:	80 91 a1 00 	lds	r24, 0x00A1
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	e9 f2       	breq	.-70     	; 0x2a0 <main+0x86>
 2e6:	1e c0       	rjmp	.+60     	; 0x324 <main+0x10a>
	  checkswitch();
	 }*/
	 
	 while(flag==2)
	  {
	  PORTC=0x00;
 2e8:	15 ba       	out	0x15, r1	; 21
	  lcd_gotoxy(0,0);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	27 df       	rcall	.-434    	; 0x13e <lcd_gotoxy>
	  lcd_string("ADC ");
 2f0:	85 e9       	ldi	r24, 0x95	; 149
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	e9 de       	rcall	.-558    	; 0xc8 <lcd_string>
	  lcd_showvalue(getdata(0));
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	79 df       	rcall	.-270    	; 0x1ec <getdata>
 2fa:	f2 de       	rcall	.-540    	; 0xe0 <lcd_showvalue>
	  lcd_string(",");
 2fc:	8a e9       	ldi	r24, 0x9A	; 154
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	e3 de       	rcall	.-570    	; 0xc8 <lcd_string>
	  lcd_showvalue(getdata(1));
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	73 df       	rcall	.-282    	; 0x1ec <getdata>
 306:	ec de       	rcall	.-552    	; 0xe0 <lcd_showvalue>
	  lcd_string(",");
 308:	8a e9       	ldi	r24, 0x9A	; 154
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	dd de       	rcall	.-582    	; 0xc8 <lcd_string>
	  lcd_showvalue(getdata(2));
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	6d df       	rcall	.-294    	; 0x1ec <getdata>
 312:	e6 de       	rcall	.-564    	; 0xe0 <lcd_showvalue>
	  lcd_gotoxy(1,0);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	12 df       	rcall	.-476    	; 0x13e <lcd_gotoxy>
	  lcd_string("press s0");
 31a:	8c e7       	ldi	r24, 0x7C	; 124
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	d4 de       	rcall	.-600    	; 0xc8 <lcd_string>
	  PORTC=0x0F;
 320:	15 bb       	out	0x15, r17	; 21
	  checkswitch();
 322:	6e df       	rcall	.-292    	; 0x200 <checkswitch>
	  PORTD=0x50;
	  
	  checkswitch();
	 }*/
	 
	 while(flag==2)
 324:	80 91 a1 00 	lds	r24, 0x00A1
 328:	82 30       	cpi	r24, 0x02	; 2
 32a:	09 f0       	breq	.+2      	; 0x32e <main+0x114>
 32c:	a8 cf       	rjmp	.-176    	; 0x27e <main+0x64>
 32e:	dc cf       	rjmp	.-72     	; 0x2e8 <main+0xce>

00000330 <__udivmodqi4>:
 330:	99 1b       	sub	r25, r25
 332:	79 e0       	ldi	r23, 0x09	; 9
 334:	04 c0       	rjmp	.+8      	; 0x33e <__udivmodqi4_ep>

00000336 <__udivmodqi4_loop>:
 336:	99 1f       	adc	r25, r25
 338:	96 17       	cp	r25, r22
 33a:	08 f0       	brcs	.+2      	; 0x33e <__udivmodqi4_ep>
 33c:	96 1b       	sub	r25, r22

0000033e <__udivmodqi4_ep>:
 33e:	88 1f       	adc	r24, r24
 340:	7a 95       	dec	r23
 342:	c9 f7       	brne	.-14     	; 0x336 <__udivmodqi4_loop>
 344:	80 95       	com	r24
 346:	08 95       	ret

00000348 <__divmodhi4>:
 348:	97 fb       	bst	r25, 7
 34a:	09 2e       	mov	r0, r25
 34c:	07 26       	eor	r0, r23
 34e:	0a d0       	rcall	.+20     	; 0x364 <__divmodhi4_neg1>
 350:	77 fd       	sbrc	r23, 7
 352:	04 d0       	rcall	.+8      	; 0x35c <__divmodhi4_neg2>
 354:	0c d0       	rcall	.+24     	; 0x36e <__udivmodhi4>
 356:	06 d0       	rcall	.+12     	; 0x364 <__divmodhi4_neg1>
 358:	00 20       	and	r0, r0
 35a:	1a f4       	brpl	.+6      	; 0x362 <__divmodhi4_exit>

0000035c <__divmodhi4_neg2>:
 35c:	70 95       	com	r23
 35e:	61 95       	neg	r22
 360:	7f 4f       	sbci	r23, 0xFF	; 255

00000362 <__divmodhi4_exit>:
 362:	08 95       	ret

00000364 <__divmodhi4_neg1>:
 364:	f6 f7       	brtc	.-4      	; 0x362 <__divmodhi4_exit>
 366:	90 95       	com	r25
 368:	81 95       	neg	r24
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
 36c:	08 95       	ret

0000036e <__udivmodhi4>:
 36e:	aa 1b       	sub	r26, r26
 370:	bb 1b       	sub	r27, r27
 372:	51 e1       	ldi	r21, 0x11	; 17
 374:	07 c0       	rjmp	.+14     	; 0x384 <__udivmodhi4_ep>

00000376 <__udivmodhi4_loop>:
 376:	aa 1f       	adc	r26, r26
 378:	bb 1f       	adc	r27, r27
 37a:	a6 17       	cp	r26, r22
 37c:	b7 07       	cpc	r27, r23
 37e:	10 f0       	brcs	.+4      	; 0x384 <__udivmodhi4_ep>
 380:	a6 1b       	sub	r26, r22
 382:	b7 0b       	sbc	r27, r23

00000384 <__udivmodhi4_ep>:
 384:	88 1f       	adc	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	5a 95       	dec	r21
 38a:	a9 f7       	brne	.-22     	; 0x376 <__udivmodhi4_loop>
 38c:	80 95       	com	r24
 38e:	90 95       	com	r25
 390:	bc 01       	movw	r22, r24
 392:	cd 01       	movw	r24, r26
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
