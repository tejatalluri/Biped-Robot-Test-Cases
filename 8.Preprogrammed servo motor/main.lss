
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000005c4  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000070a  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	4c c0       	rjmp	.+152    	; 0xce <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<util/delay.h>

	

	int main()
	 {
  38:	cf 92       	push	r12
  3a:	df 92       	push	r13
  3c:	ef 92       	push	r14
  3e:	ff 92       	push	r15
  40:	0f 93       	push	r16
  42:	1f 93       	push	r17
  44:	cf 93       	push	r28
  46:	df 93       	push	r29
	 
	 DDRB=0x01; //Motor is connected AT PORT B.0
  48:	81 e0       	ldi	r24, 0x01	; 1
  4a:	87 bb       	out	0x17, r24	; 23
	 
	 while(1)
	   {
			PORTB=0X01; // high pulse of 1 ms for 0 deg.
  4c:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  4e:	98 eb       	ldi	r25, 0xB8	; 184
  50:	c9 2e       	mov	r12, r25
  52:	9b e0       	ldi	r25, 0x0B	; 11
  54:	d9 2e       	mov	r13, r25
  56:	88 ea       	ldi	r24, 0xA8	; 168
  58:	e8 2e       	mov	r14, r24
  5a:	8e ed       	ldi	r24, 0xDE	; 222
  5c:	f8 2e       	mov	r15, r24
  5e:	2c e2       	ldi	r18, 0x2C	; 44
  60:	31 e0       	ldi	r19, 0x01	; 1
  62:	04 e9       	ldi	r16, 0x94	; 148
  64:	11 e1       	ldi	r17, 0x11	; 17
  66:	cc ec       	ldi	r28, 0xCC	; 204
  68:	d8 ed       	ldi	r29, 0xD8	; 216
  6a:	a0 e7       	ldi	r26, 0x70	; 112
  6c:	b7 e1       	ldi	r27, 0x17	; 23
  6e:	60 ef       	ldi	r22, 0xF0	; 240
  70:	72 ed       	ldi	r23, 0xD2	; 210
  72:	48 bb       	out	0x18, r20	; 24
  74:	c6 01       	movw	r24, r12
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <__SREG__+0x37>
			_delay_ms(1);
			PORTB=0X00; //low pulse of 19 ms
  7a:	18 ba       	out	0x18, r1	; 24
  7c:	c7 01       	movw	r24, r14
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <__SREG__+0x3f>
  82:	80 e1       	ldi	r24, 0x10	; 16
  84:	97 e2       	ldi	r25, 0x27	; 39
  86:	f9 01       	movw	r30, r18
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <__SREG__+0x49>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  8e:	d9 f7       	brne	.-10     	; 0x86 <__SREG__+0x47>
			  
			
			
			
			
			PORTB=0X01; // high pulse of 1 ms for 90 deg.
  90:	48 bb       	out	0x18, r20	; 24
  92:	c8 01       	movw	r24, r16
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <__SREG__+0x55>
			_delay_us(1500);
			PORTB=0X00;
  98:	18 ba       	out	0x18, r1	; 24
  9a:	ce 01       	movw	r24, r28
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <__SREG__+0x5d>
  a0:	80 e1       	ldi	r24, 0x10	; 16
  a2:	97 e2       	ldi	r25, 0x27	; 39
  a4:	f9 01       	movw	r30, r18
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <__SREG__+0x67>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__SREG__+0x65>
			
			_delay_ms(1000);
			
			
			
			PORTB=0X01;// high pulse of 2 ms for 180 deg.
  ae:	48 bb       	out	0x18, r20	; 24
  b0:	cd 01       	movw	r24, r26
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <__SREG__+0x73>
			_delay_ms(2);
			PORTB=0X00;
  b6:	18 ba       	out	0x18, r1	; 24
  b8:	cb 01       	movw	r24, r22
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <__SREG__+0x7b>
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	97 e2       	ldi	r25, 0x27	; 39
  c2:	f9 01       	movw	r30, r18
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <__SREG__+0x85>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__SREG__+0x83>
  cc:	d2 cf       	rjmp	.-92     	; 0x72 <__SREG__+0x33>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
