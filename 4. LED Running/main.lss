
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000062  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000438  00000000  00000000  000000b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000714  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	14 c0       	rjmp	.+40     	; 0x5e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>					//This is the header for AVR Microcontroller.
#include <util/delay.h>     		//header file to generate time delay.

int main(void)
{
 PORTB=0X00;						// PortB initiallization as all bits low.
  38:	18 ba       	out	0x18, r1	; 24
 DDRB=0X0F;							// PortB data direction declaration as out put.
  3a:	8f e0       	ldi	r24, 0x0F	; 15
  3c:	87 bb       	out	0x17, r24	; 23
  3e:	21 e0       	ldi	r18, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  40:	4c e2       	ldi	r20, 0x2C	; 44
  42:	51 e0       	ldi	r21, 0x01	; 1
 
	while(1)
	{
	 for(x=0x01;x!=0x10;x<<=1)		//initialize x with (00000001), while x not equals to (00010000) left shift the content of x
	 {
		PORTB=x;					//assign the value of x to PORTB
  44:	28 bb       	out	0x18, r18	; 24
  46:	88 eb       	ldi	r24, 0xB8	; 184
  48:	9b e0       	ldi	r25, 0x0B	; 11
  4a:	fa 01       	movw	r30, r20
  4c:	31 97       	sbiw	r30, 0x01	; 1
  4e:	f1 f7       	brne	.-4      	; 0x4c <__SREG__+0xd>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  50:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  52:	d9 f7       	brne	.-10     	; 0x4a <__SREG__+0xb>
 DDRB=0X0F;							// PortB data direction declaration as out put.
 unsigned char x;
 
	while(1)
	{
	 for(x=0x01;x!=0x10;x<<=1)		//initialize x with (00000001), while x not equals to (00010000) left shift the content of x
  54:	22 0f       	add	r18, r18
  56:	20 31       	cpi	r18, 0x10	; 16
  58:	a9 f7       	brne	.-22     	; 0x44 <__SREG__+0x5>
  5a:	21 e0       	ldi	r18, 0x01	; 1
  5c:	f3 cf       	rjmp	.-26     	; 0x44 <__SREG__+0x5>

0000005e <_exit>:
  5e:	f8 94       	cli

00000060 <__stop_program>:
  60:	ff cf       	rjmp	.-2      	; 0x60 <__stop_program>
